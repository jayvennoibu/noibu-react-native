#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef NOIBU_SWIFT_H
#define NOIBU_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Noibu",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSURL;
@class NSString;
enum NoibuDataMode : NSInteger;
@class NSData;
@class NSUUID;
@protocol NoibuPropertiesSanitizer;
enum NoibuPersonProfiles : NSInteger;
@class NoibuSessionReplayConfig;

SWIFT_CLASS_NAMED("NoibuConfig")
@interface NoibuConfig : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull host;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
@property (nonatomic) NSInteger flushAt;
@property (nonatomic) NSInteger maxQueueSize;
@property (nonatomic) NSInteger maxBatchSize;
@property (nonatomic) NSTimeInterval flushIntervalSeconds;
@property (nonatomic) enum NoibuDataMode dataMode;
@property (nonatomic) BOOL sendFeatureFlagEvent;
@property (nonatomic) BOOL preloadFeatureFlags;
@property (nonatomic) BOOL captureApplicationLifecycleEvents;
@property (nonatomic) BOOL captureScreenViews;
@property (nonatomic, copy) void (^ _Nullable onMobileEventTransformed)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSDictionary<NSString *, id> * _Nonnull);
/// Callback for intercepting snapshot data before and after compression
@property (nonatomic, copy) void (^ _Nullable onSnapshotIntercept)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull, NSData * _Nullable, NSData * _Nullable);
/// Enable autocapture for iOS
/// Experimental support
/// Default: false
@property (nonatomic) BOOL captureElementInteractions;
@property (nonatomic) BOOL debug;
@property (nonatomic) BOOL optOut;
@property (nonatomic, copy) NSUUID * _Nonnull (^ _Nonnull getAnonymousId)(NSUUID * _Nonnull);
/// Hook that allows to sanitize the event properties
/// The hook is called before the event is cached or sent over the wire
@property (nonatomic, strong) id <NoibuPropertiesSanitizer> _Nullable propertiesSanitizer;
/// Determines the behavior for processing user profiles.
@property (nonatomic) enum NoibuPersonProfiles personProfiles;
/// The identifier of the App Group that should be used to store shared analytics data.
/// Noibu will try to get the physical location of the App Group’s shared container, otherwise fallback to the default location
/// Default: nil
@property (nonatomic, copy) NSString * _Nullable appGroupIdentifier;
/// Internal
/// Do not modify it, this flag is read and updated by the SDK via feature flags
@property (nonatomic, copy) NSString * _Nonnull snapshotEndpoint;
/// Enable Recording of Session Replays for iOS
/// Experimental support
/// Default: false
@property (nonatomic) BOOL sessionReplay;
/// Session Replay configuration
/// Experimental support
@property (nonatomic, readonly, strong) NoibuSessionReplayConfig * _Nonnull sessionReplayConfig;
@property (nonatomic) BOOL transformMobileEvents;
- (nonnull instancetype)apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)apiKey:(NSString * _Nonnull)apiKey host:(NSString * _Nonnull)host OBJC_DESIGNATED_INITIALIZER SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NoibuDataMode, "NoibuDataMode", open) {
  NoibuDataModeWifi = 0,
  NoibuDataModeCellular = 1,
  NoibuDataModeAny = 2,
};

/// Determines the behavior for processing user profiles.
/// <ul>
///   <li>
///     <code>never</code>: We won’t process persons for any event. This means that anonymous users will not be merged once
///     they sign up or login, so you lose the ability to create funnels that track users from anonymous to identified.
///     All events (including <code>$identify</code>) will be sent with <code>$process_person_profile: False</code>.
///   </li>
///   <li>
///     <code>always</code>: We will process persons data for all events.
///   </li>
///   <li>
///     <code>identifiedOnly</code>: (default): we will only process persons when you call <code>identify</code>, <code>alias</code>, and <code>group</code>, Anonymous users won’t get person profiles.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, NoibuPersonProfiles, "NoibuPersonProfiles", open) {
  NoibuPersonProfilesNever = 0,
  NoibuPersonProfilesAlways = 1,
  NoibuPersonProfilesIdentifiedOnly = 2,
};


/// Protocol to sanitize the event properties
SWIFT_PROTOCOL_NAMED("NoibuPropertiesSanitizer")
@protocol NoibuPropertiesSanitizer
/// Sanitizes the event properties
/// Obs: <code>inout</code> cannot be used in Swift protocols, so you need to clone the properties
/// \code
/// private class ExampleSanitizer: NoibuPropertiesSanitizer {
///     public func sanitize(_ properties: [String: Any]) -> [String: Any] {
///         var sanitizedProperties = properties
///         // Perform sanitization
///         // For example, removing keys with empty values
///         for (key, value) in properties {
///             if let stringValue = value as? String, stringValue.isEmpty {
///                 sanitizedProperties.removeValue(forKey: key)
///             }
///         }
///         return sanitizedProperties
///     }
/// }
///
/// \endcode\param properties the event properties to sanitize
///
///
/// returns:
/// the sanitized properties
- (NSDictionary<NSString *, id> * _Nonnull)sanitize:(NSDictionary<NSString *, id> * _Nonnull)properties SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDate;

SWIFT_CLASS("_TtC5Noibu8NoibuSDK")
@interface NoibuSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NoibuSDK * _Nonnull shared;)
+ (NoibuSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)debug:(BOOL)enabled;
- (void)setup:(NoibuConfig * _Nonnull)config;
- (NSString * _Nonnull)getDistinctId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAnonymousId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
- (void)startSession;
- (void)endSession;
- (void)flush;
- (void)reset;
- (void)registerProperties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (void)unregisterProperties:(NSString * _Nonnull)key;
- (void)identify:(NSString * _Nonnull)distinctId;
- (void)identifyWithDistinctId:(NSString * _Nonnull)distinctId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties;
- (void)identifyWithDistinctId:(NSString * _Nonnull)distinctId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce;
- (void)capture:(NSString * _Nonnull)event;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce;
- (void)captureWithEvent:(NSString * _Nonnull)event properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups;
- (void)captureWithEvent:(NSString * _Nonnull)event distinctId:(NSString * _Nullable)distinctId properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups;
- (void)captureWithEvent:(NSString * _Nonnull)event distinctId:(NSString * _Nullable)distinctId properties:(NSDictionary<NSString *, id> * _Nullable)properties userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties userPropertiesSetOnce:(NSDictionary<NSString *, id> * _Nullable)userPropertiesSetOnce groups:(NSDictionary<NSString *, NSString *> * _Nullable)groups timestamp:(NSDate * _Nullable)timestamp;
- (void)screen:(NSString * _Nonnull)screenTitle;
- (void)screenWithTitle:(NSString * _Nonnull)screenTitle properties:(NSDictionary<NSString *, id> * _Nullable)properties;
- (void)alias:(NSString * _Nonnull)alias;
- (void)groupWithType:(NSString * _Nonnull)type key:(NSString * _Nonnull)key;
- (void)groupWithType:(NSString * _Nonnull)type key:(NSString * _Nonnull)key groupProperties:(NSDictionary<NSString *, id> * _Nullable)groupProperties;
- (void)reloadFeatureFlags;
- (void)reloadFeatureFlagsWithCallback:(void (^ _Nonnull)(void))callback;
- (id _Nullable)getFeatureFlag:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFeatureEnabled:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getFeatureFlagPayload:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)optIn;
- (void)optOut;
- (BOOL)isOptOut SWIFT_WARN_UNUSED_RESULT;
- (void)close;
+ (NoibuSDK * _Nonnull)with:(NoibuConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSessionReplayActive SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAutocaptureActive SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NoibuSDK (SWIFT_EXTENSION(Noibu))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStartNotification;)
+ (NSNotificationName _Nonnull)didStartNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didReceiveFeatureFlags;)
+ (NSNotificationName _Nonnull)didReceiveFeatureFlags SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5Noibu19NoibuSessionManager")
@interface NoibuSessionManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NoibuSessionManager * _Nonnull shared;)
+ (NoibuSessionManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setSessionId:(NSString * _Nonnull)sessionId;
@end


SWIFT_CLASS_NAMED("NoibuSessionReplayConfig")
@interface NoibuSessionReplayConfig : NSObject
/// Enable masking of all text and text input fields
/// Experimental support
/// Default: true
@property (nonatomic) BOOL maskAllTextInputs;
/// Enable masking of all images to a placeholder
/// Experimental support
/// Default: true
@property (nonatomic) BOOL maskAllImages;
/// Enable masking of all sandboxed system views
/// These may include UIImagePickerController, PHPickerViewController and CNContactPickerViewController
/// Experimental support
/// Default: true
@property (nonatomic) BOOL maskAllSandboxedViews;
/// Enable masking of images that likely originated from user’s photo library
/// Experimental support (UIKit only)
/// Default: false
/// note:
/// Deprecated
@property (nonatomic) BOOL maskPhotoLibraryImages SWIFT_DEPRECATED_MSG("This property has no effect and will be removed in the next major release. To learn how to manually mask user photos please see our Privacy controls documentation: https://Noibu.com/docs/session-replay/privacy?tab=iOS");
/// Enable capturing network telemetry
/// Experimental support
/// Default: true
@property (nonatomic) BOOL captureNetworkTelemetry;
/// By default Session replay will capture all the views on the screen as a wireframe,
/// By enabling this option, Noibu will capture the screenshot of the screen.
/// The screenshot may contain sensitive information, use with caution.
/// Experimental support
/// Default: false
@property (nonatomic) BOOL screenshotMode;
/// Deboucer delay used to reduce the number of snapshots captured and reduce performance impact
/// This is used for capturing the view as a wireframe or screenshot
/// The lower the number more snapshots will be captured but higher the performance impact
/// Defaults to 1s
@property (nonatomic) NSTimeInterval debouncerDelay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




































#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
