// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios18.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Noibu
import Foundation
@_exported import Noibu
import PhotosUI
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_hasMissingDesignatedInitializers public class NoibuEvent {
  public var event: Swift.String
  public var distinctId: Swift.String
  public var properties: [Swift.String : Any]
  public var timestamp: Foundation.Date
  public var uuid: Foundation.UUID
  public var apiKey: Swift.String?
  @objc deinit
}
@objc(NoibuConfig) public class NoibuConfig : ObjectiveC.NSObject {
  @objc(NoibuDataMode) public enum NoibuDataMode : Swift.Int {
    case wifi
    case cellular
    case any
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let host: Foundation.URL
  @objc final public let apiKey: Swift.String
  @objc public var flushAt: Swift.Int
  @objc public var maxQueueSize: Swift.Int
  @objc public var maxBatchSize: Swift.Int
  @objc public var flushIntervalSeconds: Swift.Double
  @objc public var dataMode: Noibu.NoibuConfig.NoibuDataMode
  @objc public var sendFeatureFlagEvent: Swift.Bool
  @objc public var preloadFeatureFlags: Swift.Bool
  @objc public var captureApplicationLifecycleEvents: Swift.Bool
  @objc public var captureScreenViews: Swift.Bool
  @objc public var captureElementInteractions: Swift.Bool
  @objc public var debug: Swift.Bool
  @objc public var optOut: Swift.Bool
  @objc public var getAnonymousId: (_ uuid: Foundation.UUID) -> Foundation.UUID
  @objc public var propertiesSanitizer: (any Noibu.NoibuPropertiesSanitizer)?
  @objc public var personProfiles: Noibu.NoibuPersonProfiles
  @objc public var appGroupIdentifier: Swift.String?
  @objc public var snapshotEndpoint: Swift.String
  public static let defaultHost: Swift.String
  @objc public var sessionReplay: Swift.Bool
  @objc final public let sessionReplayConfig: Noibu.NoibuSessionReplayConfig
  public var storageManager: Noibu.NoibuStorageManager?
  @objc public var transformMobileEvents: Swift.Bool
  @objc(apiKey:) public init(apiKey: Swift.String)
  @objc(apiKey:host:) public init(apiKey: Swift.String, host: Swift.String = defaultHost)
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func NoibuMask(_ isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@objc(NoibuPersonProfiles) public enum NoibuPersonProfiles : Swift.Int {
  case never
  case always
  case identifiedOnly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NoibuPropertiesSanitizer) public protocol NoibuPropertiesSanitizer {
  @objc func sanitize(_ properties: [Swift.String : Any]) -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers @objc public class NoibuSDK : ObjectiveC.NSObject {
  @objc nonisolated(unsafe) public static let shared: Noibu.NoibuSDK
  @objc deinit
  @objc public func debug(_ enabled: Swift.Bool = true)
  @objc public func setup(_ config: Noibu.NoibuConfig)
  @objc public func getDistinctId() -> Swift.String
  @objc public func getAnonymousId() -> Swift.String
  @objc public func getSessionId() -> Swift.String?
  @objc public func startSession()
  @objc public func endSession()
  @objc public func flush()
  @objc public func reset()
  @objc(registerProperties:) public func register(_ properties: [Swift.String : Any])
  @objc(unregisterProperties:) public func unregister(_ key: Swift.String)
  @objc public func identify(_ distinctId: Swift.String)
  @objc(identifyWithDistinctId:userProperties:) public func identify(_ distinctId: Swift.String, userProperties: [Swift.String : Any]? = nil)
  @objc(identifyWithDistinctId:userProperties:userPropertiesSetOnce:) public func identify(_ distinctId: Swift.String, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil)
  @objc public func capture(_ event: Swift.String)
  @objc(captureWithEvent:properties:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:userPropertiesSetOnce:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil)
  @objc(captureWithEvent:properties:userProperties:userPropertiesSetOnce:groups:) public func capture(_ event: Swift.String, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil, groups: [Swift.String : Swift.String]? = nil)
  @objc(captureWithEvent:distinctId:properties:userProperties:userPropertiesSetOnce:groups:) public func capture(_ event: Swift.String, distinctId: Swift.String? = nil, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil, groups: [Swift.String : Swift.String]? = nil)
  @objc(captureWithEvent:distinctId:properties:userProperties:userPropertiesSetOnce:groups:timestamp:) public func capture(_ event: Swift.String, distinctId: Swift.String? = nil, properties: [Swift.String : Any]? = nil, userProperties: [Swift.String : Any]? = nil, userPropertiesSetOnce: [Swift.String : Any]? = nil, groups: [Swift.String : Swift.String]? = nil, timestamp: Foundation.Date? = nil)
  @objc public func screen(_ screenTitle: Swift.String)
  @objc(screenWithTitle:properties:) public func screen(_ screenTitle: Swift.String, properties: [Swift.String : Any]? = nil)
  @objc public func alias(_ alias: Swift.String)
  @objc(groupWithType:key:) public func group(type: Swift.String, key: Swift.String)
  @objc(groupWithType:key:groupProperties:) public func group(type: Swift.String, key: Swift.String, groupProperties: [Swift.String : Any]? = nil)
  @objc public func reloadFeatureFlags()
  @objc(reloadFeatureFlagsWithCallback:) public func reloadFeatureFlags(_ callback: @escaping () -> Swift.Void)
  @objc public func getFeatureFlag(_ key: Swift.String) -> Any?
  @objc public func isFeatureEnabled(_ key: Swift.String) -> Swift.Bool
  @objc public func getFeatureFlagPayload(_ key: Swift.String) -> Any?
  @objc public func optIn()
  @objc public func optOut()
  @objc public func isOptOut() -> Swift.Bool
  @objc public func close()
  @objc public static func with(_ config: Noibu.NoibuConfig) -> Noibu.NoibuSDK
  @objc public func isSessionReplayActive() -> Swift.Bool
  @objc public func isAutocaptureActive() -> Swift.Bool
}
extension Noibu.NoibuSDK {
  @objc public static let didStartNotification: Foundation.Notification.Name
  @objc public static let didReceiveFeatureFlags: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NoibuSessionManager : ObjectiveC.NSObject {
  @objc public static let shared: Noibu.NoibuSessionManager
  @objc public func setSessionId(_ sessionId: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NoibuSessionReplayConfig) public class NoibuSessionReplayConfig : ObjectiveC.NSObject {
  @objc public var maskAllTextInputs: Swift.Bool
  @objc public var maskAllImages: Swift.Bool
  @objc public var maskAllSandboxedViews: Swift.Bool
  @available(*, deprecated, message: "This property has no effect and will be removed in the next major release. To learn how to manually mask user photos please see our Privacy controls documentation: https://Noibu.com/docs/session-replay/privacy?tab=iOS")
  @objc public var maskPhotoLibraryImages: Swift.Bool
  @objc public var captureNetworkTelemetry: Swift.Bool
  @objc public var screenshotMode: Swift.Bool
  @objc public var debouncerDelay: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoibuStorageManager {
  public func getAnonymousId() -> Swift.String
  public func setAnonymousId(_ id: Swift.String)
  public func getDistinctId() -> Swift.String
  public func setDistinctId(_ id: Swift.String)
  public func isIdentified() -> Swift.Bool
  public func setIdentified(_ isIdentified: Swift.Bool)
  public func isPersonProcessing() -> Swift.Bool
  public func setPersonProcessing(_ enable: Swift.Bool)
  public func reset(_ resetStorage: Swift.Bool = false)
  @objc deinit
}
public var NoibuVersion: Swift.String
public let NoibuiOSSdkName: Swift.String
public var NoibuSdkName: Swift.String
public func dateToMillis(_ date: Foundation.Date) -> Swift.Int64
public func imageToBase64(_ image: UIKit.UIImage, _ compressionQuality: CoreFoundation.CGFloat = 0.3) -> Swift.String?
extension Foundation.URLSession {
  public func NoibuData(for request: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
  public func NoibuData(from url: Foundation.URL) async throws -> (Foundation.Data, Foundation.URLResponse)
  public func NoibuUpload(for request: Foundation.URLRequest, fromFile fileURL: Foundation.URL) async throws -> (Foundation.Data, Foundation.URLResponse)
  public func NoibuUpload(for request: Foundation.URLRequest, from bodyData: Foundation.Data) async throws -> (Foundation.Data, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuData(for request: Foundation.URLRequest, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuData(from url: Foundation.URL, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuUpload(for request: Foundation.URLRequest, fromFile fileURL: Foundation.URL, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuUpload(for request: Foundation.URLRequest, from bodyData: Foundation.Data, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.Data, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuDownload(for request: Foundation.URLRequest, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.URL, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuDownload(from url: Foundation.URL, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.URL, Foundation.URLResponse)
  @available(iOS 15.0, *)
  public func NoibuDownload(resumeFrom resumeData: Foundation.Data, delegate: (any Foundation.URLSessionTaskDelegate)? = nil) async throws -> (Foundation.URL, Foundation.URLResponse)
}
extension Noibu.MobileEventTransformer {
  public enum TransformerError : Swift.Error {
    case invalidType
    case missingKey(Swift.String)
    case schemaValidationFailed(Swift.String)
  }
  public enum EventType : Swift.Int {
    case fullSnapshot
    case incrementalSnapshot
    case meta
    case custom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct EventWithTime {
    public let type: Noibu.MobileEventTransformer.EventType
    public let timestamp: Swift.Int
    public let delay: Swift.Int?
    public let data: [Swift.String : Any]?
  }
}
@_hasMissingDesignatedInitializers public class MobileEventTransformer {
  public func transformEventToWeb(_ eventDictionary: [Swift.String : Any], validateTransformation: Swift.Bool = false) throws -> Noibu.MobileEventTransformer.EventWithTime
  @objc deinit
}
public enum Gzip {
  public static let maxWindowBits: Swift.Int32
}
public struct CompressionLevel : Swift.RawRepresentable, Swift.Sendable {
  public let rawValue: Swift.Int32
  public static let noCompression: Noibu.CompressionLevel
  public static let bestSpeed: Noibu.CompressionLevel
  public static let bestCompression: Noibu.CompressionLevel
  public static let defaultCompression: Noibu.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error, Swift.Sendable {
  public enum Kind : Swift.Equatable, Swift.Sendable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: Noibu.GzipError.Kind, b: Noibu.GzipError.Kind) -> Swift.Bool
  }
  public let kind: Noibu.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
public func toISO8601String(_ date: Foundation.Date) -> Swift.String
public func toISO8601Date(_ date: Swift.String) -> Foundation.Date?
public func sanitizeDictionary(_ dict: [Swift.String : Any]?) -> [Swift.String : Any]?
public func deleteSafely(_ file: Foundation.URL)
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (Noibu.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (Noibu.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Noibu.Reachability.NetworkStatus, b: Noibu.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: Noibu.Reachability.Connection
    public static func == (a: Noibu.Reachability.Connection, b: Noibu.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Noibu.Reachability.NetworkReachable?
  public var whenUnreachable: Noibu.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Noibu.Reachability.Connection {
    get
  }
  public var connection: Noibu.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
@propertyWrapper final public class ReadWriteLock<Value> {
  public init(wrappedValue value: Value)
  @objc deinit
  final public var wrappedValue: Value {
    get
    set
  }
  @discardableResult
  final public func mutate<T>(_ closure: (inout Value) -> T) -> T
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var NoibuLabel: Swift.String? {
    get
    set
  }
}
extension Noibu.NoibuConfig.NoibuDataMode : Swift.Equatable {}
extension Noibu.NoibuConfig.NoibuDataMode : Swift.Hashable {}
extension Noibu.NoibuConfig.NoibuDataMode : Swift.RawRepresentable {}
extension Noibu.NoibuPersonProfiles : Swift.Equatable {}
extension Noibu.NoibuPersonProfiles : Swift.Hashable {}
extension Noibu.NoibuPersonProfiles : Swift.RawRepresentable {}
extension Noibu.MobileEventTransformer.EventType : Swift.Equatable {}
extension Noibu.MobileEventTransformer.EventType : Swift.Hashable {}
extension Noibu.MobileEventTransformer.EventType : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension Noibu.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Noibu.Reachability.NetworkStatus : Swift.Hashable {}
extension Noibu.Reachability.Connection : Swift.Equatable {}
extension Noibu.Reachability.Connection : Swift.Hashable {}
